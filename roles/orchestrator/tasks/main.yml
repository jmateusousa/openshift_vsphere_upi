---

- name: install terraform
  unarchive:
     src: "{{ packages.terraform_url }}"
     dest: /usr/local/bin
     remote_src: True
     validate_certs: "{{ packages.validate_certs }}"
  environment: "{{ proxy_env }}"

- name: install openshift client
  unarchive:
     src: "{{ packages.openshift_client_linux_url }}"
     dest: /usr/local/bin
     remote_src: True
     validate_certs: "{{ packages.validate_certs }}"
  environment: "{{ proxy_env }}"

- name: install openshift install
  unarchive:
     src: "{{ packages.openshift_install_linux_url }}"
     dest: /usr/local/bin
     remote_src: True
     validate_certs: "{{ packages.validate_certs }}"
  environment: "{{ proxy_env }}"

- name: create terraform main.tf 
  template:
     src: main.tf.j2
     dest: "{{ base_dir }}/terraform/main.tf"
     mode: u=rw,g=r,o=r

- name: create terraform terraform.tfvars
  template:
     src: terraform.tfvars.j2
     dest: "{{ base_dir }}/terraform/terraform.tfvars"
     mode: u=rw,g=r,o=r

- name: create terraform variables.tf 
  template:
     src: variables.tf.j2
     dest: "{{ base_dir }}/terraform/variables.tf"
     mode: u=rw,g=r,o=r

- name: create terraform versions.tf
  template:
     src: versions.tf.j2
     dest: "{{ base_dir }}/terraform/versions.tf"
     mode: u=rw,g=r,o=r

- name: Init terraform
  command: terraform init -no-color
  args:
     chdir: "{{ item }}"
  with_items:
     - "{{ base_dir }}/terraform"
  environment: "{{ proxy_env }}"

- name: create openshift install config file
  template:
     src: "install-config.yaml.j2"
     dest: "{{ base_dir }}/install-config.yaml"
